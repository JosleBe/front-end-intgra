import { useEffect, useState } from "react";
import { MessageCircle, Send } from "lucide-react";
import Input from "@mui/joy/Input";
import Button from "@mui/joy/Button";
import './Chat.css'
import { Tabs } from "antd";
import { addDoc, collection, onSnapshot, orderBy, query, serverTimestamp } from "@firebase/firestore";
import { db } from "../../config/firebase.confing";

const contacts = [
   
];

export default function Chat() {
    const [activeChat, setActiveChat] = useState(contacts[0]);
    const [messages, setMessages] = useState({});
    const [newMessage, setNewMessage] = useState("");
    const [tabValue, setTabValue] = useState("0");
    const [recipientEmail, setRecipientEmail] = useState('joslebe321@gmail.com');
    const user = JSON.parse(localStorage.getItem("profileInfo"));// Cambiar de setItem a getItem
    const {email} = user;
    console.log(email);
    
    useEffect(() => {
        if ( !recipientEmail) return;
       
        const chatId = getChatId(email, recipientEmail);
        
        const q = query(
          collection(db, `chats/${chatId}/messages`),
          orderBy('timestamp')
        );
    
        const unsubscribe = onSnapshot(q, (snapshot) => {
          const messagesArray = snapshot.docs.map((doc) => ({
            id: doc.id, // Incluir el ID del documento
            ...doc.data(),
          }));

          // Filtrar mensajes únicos por ID para evitar repetición
          const uniqueMessages = Array.from(
            new Map(messagesArray.map((msg) => [msg.id, msg])).values()
          );

          setMessages((prevMessages) => ({
            ...prevMessages,
            [chatId]: uniqueMessages, // Almacenar mensajes por chatId
          }));
        });
    
        return () => unsubscribe();
    }, [email, recipientEmail]);
    

    const handleSendMessage = async (e) => {
        e.preventDefault();
        if (newMessage.trim() === '' || !recipientEmail) return;

        const chatId = getChatId(email, recipientEmail);

        const message = {
          text: newMessage,
          sender: email,
          recipient: recipientEmail,
          timestamp: serverTimestamp(),
        };

        await addDoc(collection(db, `chats/${chatId}/messages`), message);
        setNewMessage('');
    };

    const getChatId = (userEmail, recipientEmail) => {
        return userEmail < recipientEmail
          ? `${userEmail}_to_${recipientEmail}`
          : `${recipientEmail}_to_${userEmail}`;
    };

    const handleTyping = (e) => {
        setNewMessage(e.target.value);
    };

    const handleContactClick = (contact) => {
        setActiveChat(contact);
        setRecipientEmail(contact.name);  // Asumiendo que el nombre del contacto es el email para simplificar
    };

    return (
        <div className="flex h-100 bg-gradient-to-r from-indigo-500 to-blue-600">
            <div className="w-80 bg-white p-4 rounded-l-lg shadow-md overflow-y-auto">
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                    <h2 className="text-2xl font-bold text-black mb-4">Mensajes</h2>
                    <img src="https://cdn-icons-png.flaticon.com/512/9385/9385289.png" style={{ width: '40px' }} />
                </div>

                <form className="flex items-center max-w-sm mx-auto">
                    <label htmlFor="simple-search" className="sr-only">Search</label>
                    <div className="relative w-full">
                        <div className="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                            <svg className="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                                <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 5v10M3 5a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm12 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0V6a3 3 0 0 0-3-3H9m1.5-2-2 2 2 2" />
                            </svg>
                        </div>
                        <input type="text" id="simple-search" className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Search branch name..." required />
                    </div>
                    <button type="submit" className="p-2.5 ms-2 text-sm font-medium text-white bg-black rounded-lg border ">
                        <svg className="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                            <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                        </svg>
                        <span className="sr-only">Search</span>
                    </button>
                </form>

                <Tabs
                    activeKey={tabValue}
                    onChange={setTabValue}
                    size="small"
                    style={{ width: '100%' }}
                    tabBarStyle={{
                        alignItems: 'center',
                        justifyContent: 'center',
                        width: '150px',
                        marginLeft: 50
                    }}
                    indicator={{
                        size: 80,
                        align: 'center',
                    }}
                    items={[
                        {
                            key: "0",
                            label: <span style={{ color: 'black' }}>Mensajes</span>,
                            children: (
                                <ul className="space-y-3">
                                    {contacts.map((contact) => (
                                        <li
                                            key={contact.id}
                                            className={`p-2 cursor-pointer flex items-center transition-all duration-200 ease-in-out transform hover:scale-105 hover:bg-gray-300 hover:gray-800 ${activeChat.id === contact.id
                                                    ? "bg-gray-300 text-black shadow-sm"
                                                    : "text-gray-700"
                                                }`}
                                            onClick={() => handleContactClick(contact)}
                                        >
                                            <div className="flex items-center gap-2">
                                                <img
                                                    src="https://cdn-icons-png.flaticon.com/512/9385/9385289.png"
                                                    style={{ width: '35px' }}
                                                />
                                                <div className="flex flex-col">
                                                    <div className="flex justify-between w-full gap-9 items-center">
                                                        <span className="text-sm font-bold w-16">{contact.name}</span>
                                                        <span className="text-xs font-thin">2022-02-02</span>
                                                    </div>
                                                    <p className="text-xs font-normal">Este es el último mensaje</p>
                                                </div>
                                            </div>
                                        </li>
                                    ))}
                                </ul>
                            )
                        },
                        {
                            key: "1",
                            label: <span style={{ color: 'black' }}>Nuevos</span>,
                            children: <p>Contenido de la bandeja de entrada</p>
                        }
                    ]}
                />

            </div>

            <div style={{ backgroundColor: '#F1F0EC' }} className="w-5/6 flex flex-col h-full  from-white  rounded-r-lg shadow-md">
                <div style={{ backgroundColor: 'white' }} className=" text-white p-3 flex items-center justify-between">
                    <div className="flex items-center gap-3">
                        <img src="https://cdn-icons-png.flaticon.com/512/9385/9385289.png" style={{ width: '50px' }} />
                       
                    </div>
                </div>

                <div className="flex-1 p-4 overflow-y-auto space-y-3">
                    {(messages[getChatId(email, recipientEmail)] || []).map((msg, index) => (
                        <div
                            key={index}
                            className={`p-3 rounded-lg max-w-md ${msg.sender === email ? "bg-indigo-500 text-white ml-auto shadow-sm" : "bg-gray-300 text-gray-800"}`}
                        >
                            <div>
                                <span className="font-bold text-sm">{msg.sender}</span>
                                <p>{msg.text}</p>
                            </div>
                        </div>
                    ))}
                </div>

                <div className="p-4 bg-white border-t flex items-center">
                    <Input
                        className="flex-1 mr-3 py-2 px-4 border rounded-full shadow-sm"
                        value={newMessage}
                        onChange={handleTyping}
                        placeholder="Escribe un mensaje..."
                        size="sm"
                    />
                    <Button
                        onClick={handleSendMessage}
                        variant="solid"
                        color="primary"
                        className="p-3 rounded-full transition-all hover:bg-indigo-700 shadow-md"
                    >
                        <Send size={15} />
                    </Button>
                </div>
            </div>
        </div>
    );
}


